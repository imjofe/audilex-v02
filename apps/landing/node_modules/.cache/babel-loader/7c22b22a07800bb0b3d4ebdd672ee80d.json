{"ast":null,"code":"var _jsxFileName = \"/workspaces/audilex-v02/apps/landing/src/routes/PrivateRoute.tsx\",\n    _s = $RefreshSig$();\n\nimport { Suspense } from 'react';\nimport { Navigate, useLocation, Outlet } from 'react-router-dom'; // helpers\n\nimport { APICore } from '../helpers/api/apiCore'; // hooks\n\nimport { useUser } from '../hooks/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst loading = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 14,\n  columnNumber: 23\n}, this);\n/**\n * Private Route forces the authorization before the route can be accessed\n * @param {*} param0\n * @returns\n */\n\n\nconst PrivateRoute = _ref => {\n  _s();\n\n  let {\n    roles,\n    ...rest\n  } = _ref;\n  let location = useLocation();\n  const [loggedInUser] = useUser();\n  const api = new APICore();\n  /**\n   * not logged in so redirect to login page with the return url\n   */\n\n  if (api.isUserAuthenticated() === false) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: '/auth/login',\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 16\n    }, this);\n  } // check if route is restricted by role\n\n\n  if (roles && roles.indexOf(loggedInUser.role) === -1) {\n    // role not authorised so redirect to home page\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: {\n        pathname: '/'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: loading(),\n    children: /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PrivateRoute, \"muz0gA5CAMOxG0Ptis5WfmTxk0I=\", false, function () {\n  return [useLocation, useUser];\n});\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/workspaces/audilex-v02/apps/landing/src/routes/PrivateRoute.tsx"],"names":["Suspense","Navigate","useLocation","Outlet","APICore","useUser","loading","PrivateRoute","roles","rest","location","loggedInUser","api","isUserAuthenticated","from","indexOf","role","pathname"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,QAA8C,kBAA9C,C,CAEA;;AACA,SAASC,OAAT,QAAwB,wBAAxB,C,CAEA;;AACA,SAASC,OAAT,QAAwB,eAAxB;;;AAMA,MAAMC,OAAO,GAAG,mBAAM;AAAK,EAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,QAAtB;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,YAAY,GAAG,QAA2C;AAAA;;AAAA,MAA1C;AAAEC,IAAAA,KAAF;AAAS,OAAGC;AAAZ,GAA0C;AAC5D,MAAIC,QAAQ,GAAGR,WAAW,EAA1B;AACA,QAAM,CAACS,YAAD,IAAiBN,OAAO,EAA9B;AAEA,QAAMO,GAAG,GAAG,IAAIR,OAAJ,EAAZ;AAEA;AACJ;AACA;;AACI,MAAIQ,GAAG,CAACC,mBAAJ,OAA8B,KAAlC,EAAyC;AACrC,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAE,aAAd;AAA6B,MAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAEJ;AAAR,OAApC;AAAwD,MAAA,OAAO;AAA/D;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAX2D,CAa5D;;;AACA,MAAIF,KAAK,IAAIA,KAAK,CAACO,OAAN,CAAcJ,YAAY,CAACK,IAA3B,MAAqC,CAAC,CAAnD,EAAsD;AAClD;AACA,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ;AAAd;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,sBACI,QAAC,QAAD;AAAU,IAAA,QAAQ,EAAEX,OAAO,EAA3B;AAAA,2BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAvBD;;GAAMC,Y;UACaL,W,EACQG,O;;;KAFrBE,Y;AAyBN,eAAeA,YAAf","sourcesContent":["import { Suspense } from 'react';\nimport { Navigate, useLocation, Outlet } from 'react-router-dom';\n\n// helpers\nimport { APICore } from '../helpers/api/apiCore';\n\n// hooks\nimport { useUser } from '../hooks/auth';\n\ntype PrivateRouteProps = {\n    roles?: string;\n};\n\nconst loading = () => <div className=\"\"></div>;\n\n/**\n * Private Route forces the authorization before the route can be accessed\n * @param {*} param0\n * @returns\n */\nconst PrivateRoute = ({ roles, ...rest }: PrivateRouteProps) => {\n    let location = useLocation();\n    const [loggedInUser] = useUser();\n\n    const api = new APICore();\n\n    /**\n     * not logged in so redirect to login page with the return url\n     */\n    if (api.isUserAuthenticated() === false) {\n        return <Navigate to={'/auth/login'} state={{ from: location }} replace />;\n    }\n\n    // check if route is restricted by role\n    if (roles && roles.indexOf(loggedInUser.role) === -1) {\n        // role not authorised so redirect to home page\n        return <Navigate to={{ pathname: '/' }} />;\n    }\n    return (\n        <Suspense fallback={loading()}>\n            <Outlet />\n        </Suspense>\n    );\n};\n\nexport default PrivateRoute;\n"]},"metadata":{},"sourceType":"module"}