{"ast":null,"code":"var _jsxFileName = \"/workspaces/audilex-v02/apps/landing/src/components/form/FormInput.tsx\";\nimport React from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n// textual form-controlsâ€”like inputs, passwords, textareas etc.\nconst TextualInput = _ref => {\n  let {\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n      type: type,\n      placeholder: placeholder,\n      name: name,\n      as: comp,\n      id: name,\n      ref: r => {\n        if (refCallback) refCallback(r);\n      },\n      className: className,\n      isInvalid: errors && errors[name] ? true : false,\n      ...(register ? register(name) : {}),\n      rows: rows,\n      ...otherProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), errors && errors[name] && /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n      type: \"invalid\",\n      className: \"d-block\",\n      children: errors[name]['message']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}; // non-textual checkbox and radio controls\n\n\n_c = TextualInput;\n\nconst CheckInput = _ref2 => {\n  let {\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n      type: type,\n      label: label,\n      name: name,\n      id: name,\n      ref: r => {\n        if (refCallback) refCallback(r);\n      },\n      className: className,\n      isInvalid: errors && errors[name] ? true : false,\n      ...(register ? register(name) : {}),\n      ...otherProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), errors && errors[name] && /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n      type: \"invalid\",\n      children: errors[name]['message']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}; // handle select controls\n\n\n_c2 = CheckInput;\n\nconst SelectInput = _ref3 => {\n  let {\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Select, {\n      type: type,\n      label: label,\n      name: name,\n      id: name,\n      ref: r => {\n        if (refCallback) refCallback(r);\n      },\n      className: className,\n      isInvalid: errors && errors[name] ? true : false,\n      ...(register ? register(name) : {}),\n      ...otherProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), errors && errors[name] && /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n      type: \"invalid\",\n      children: errors[name]['message']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}; // extend textual form-controls with add-ons\n\n\n_c3 = SelectInput;\n\nconst FormInputGroup = _ref4 => {\n  let {\n    startIcon,\n    type,\n    name,\n    placeholder,\n    comp,\n    register,\n    errors,\n    rows,\n    className,\n    textClassName,\n    refCallback,\n    ...otherProps\n  } = _ref4;\n  return /*#__PURE__*/_jsxDEV(InputGroup, {\n    children: [/*#__PURE__*/_jsxDEV(InputGroup.Text, {\n      className: textClassName,\n      children: startIcon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), type === 'select' ? /*#__PURE__*/_jsxDEV(SelectInput, {\n      type: type,\n      name: name,\n      placeholder: placeholder,\n      refCallback: refCallback,\n      comp: comp,\n      errors: errors,\n      register: register,\n      className: className,\n      rows: rows,\n      ...otherProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(TextualInput, {\n      type: type,\n      name: name,\n      placeholder: placeholder,\n      refCallback: refCallback,\n      comp: comp,\n      errors: errors,\n      register: register,\n      className: className,\n      rows: rows,\n      ...otherProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 9\n  }, this);\n};\n\n_c4 = FormInputGroup;\n\nconst FormInput = _ref5 => {\n  let {\n    startIcon,\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    textClassName,\n    refCallback,\n    action,\n    rows,\n    ...otherProps\n  } = _ref5;\n  // handle input type\n  const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: type === 'hidden' ? /*#__PURE__*/_jsxDEV(\"input\", {\n      type: type,\n      name: name,\n      ...(register ? register(name) : {}),\n      ...otherProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: type === 'checkbox' || type === 'radio' ? /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: containerClass,\n        children: /*#__PURE__*/_jsxDEV(CheckInput, {\n          type: type,\n          label: label,\n          name: name,\n          placeholder: placeholder,\n          refCallback: refCallback,\n          errors: errors,\n          register: register,\n          comp: comp,\n          className: className,\n          rows: rows,\n          ...otherProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 25\n      }, this) : type === 'select' ? /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: containerClass,\n        children: [label && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            className: labelClassName,\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 37\n          }, this), action && action]\n        }, void 0, true), startIcon ? /*#__PURE__*/_jsxDEV(FormInputGroup, {\n          type: type,\n          startIcon: startIcon,\n          name: name,\n          comp: comp,\n          textClassName: textClassName,\n          placeholder: placeholder,\n          refCallback: refCallback,\n          errors: errors,\n          register: register,\n          className: className,\n          rows: rows,\n          ...otherProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(SelectInput, {\n          type: type,\n          name: name,\n          placeholder: placeholder,\n          refCallback: refCallback,\n          errors: errors,\n          register: register,\n          comp: comp,\n          className: className,\n          rows: rows,\n          ...otherProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: containerClass,\n        children: [label && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            className: labelClassName,\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 37\n          }, this), action && action]\n        }, void 0, true), startIcon ? /*#__PURE__*/_jsxDEV(FormInputGroup, {\n          type: type,\n          startIcon: startIcon,\n          name: name,\n          comp: comp,\n          textClassName: textClassName,\n          placeholder: placeholder,\n          refCallback: refCallback,\n          errors: errors,\n          register: register,\n          className: className,\n          rows: rows,\n          ...otherProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(TextualInput, {\n          type: type,\n          name: name,\n          placeholder: placeholder,\n          refCallback: refCallback,\n          errors: errors,\n          register: register,\n          comp: comp,\n          className: className,\n          rows: rows,\n          ...otherProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 25\n      }, this)\n    }, void 0, false)\n  }, void 0, false);\n};\n\n_c5 = FormInput;\nexport default FormInput;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"TextualInput\");\n$RefreshReg$(_c2, \"CheckInput\");\n$RefreshReg$(_c3, \"SelectInput\");\n$RefreshReg$(_c4, \"FormInputGroup\");\n$RefreshReg$(_c5, \"FormInput\");","map":{"version":3,"sources":["/workspaces/audilex-v02/apps/landing/src/components/form/FormInput.tsx"],"names":["React","Form","InputGroup","TextualInput","type","name","placeholder","register","errors","comp","rows","className","refCallback","otherProps","r","CheckInput","label","SelectInput","FormInputGroup","startIcon","textClassName","FormInput","control","labelClassName","containerClass","action"],"mappings":"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","sourcesContent":["import React, { InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ninterface FormInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    startIcon?: React.ReactNode;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: React.ReactNode;\n    rows?: string | number;\n}\n\n// textual form-controlsâ€”like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Control\n                type={type}\n                placeholder={placeholder}\n                name={name}\n                as={comp}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                rows={rows}\n                {...otherProps}\n            ></Form.Control>\n\n            {errors && errors[name] && (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            )}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] && (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            )}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] && (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            )}\n        </>\n    );\n};\n\n// extend textual form-controls with add-ons\nconst FormInputGroup = ({\n    startIcon,\n    type,\n    name,\n    placeholder,\n    comp,\n    register,\n    errors,\n    rows,\n    className,\n    textClassName,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <InputGroup>\n            <InputGroup.Text className={textClassName}>{startIcon}</InputGroup.Text>\n            {type === 'select' ? (\n                <SelectInput\n                    type={type}\n                    name={name}\n                    placeholder={placeholder}\n                    refCallback={refCallback}\n                    comp={comp}\n                    errors={errors}\n                    register={register}\n                    className={className}\n                    rows={rows}\n                    {...otherProps}\n                />\n            ) : (\n                <TextualInput\n                    type={type}\n                    name={name}\n                    placeholder={placeholder}\n                    refCallback={refCallback}\n                    comp={comp}\n                    errors={errors}\n                    register={register}\n                    className={className}\n                    rows={rows}\n                    {...otherProps}\n                />\n            )}\n        </InputGroup>\n    );\n};\n\nconst FormInput = ({\n    startIcon,\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    textClassName,\n    refCallback,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'checkbox' || type === 'radio' ? (\n                        <Form.Group className={containerClass}>\n                            <CheckInput\n                                type={type}\n                                label={label}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                rows={rows}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label && (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            )}\n                            {startIcon ? (\n                                <FormInputGroup\n                                    type={type}\n                                    startIcon={startIcon}\n                                    name={name}\n                                    comp={comp}\n                                    textClassName={textClassName}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            ) : (\n                                <SelectInput\n                                    type={type}\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    comp={comp}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            )}\n                        </Form.Group>\n                    ) : (\n                        <Form.Group className={containerClass}>\n                            {label && (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            )}\n                            {startIcon ? (\n                                <FormInputGroup\n                                    type={type}\n                                    startIcon={startIcon}\n                                    name={name}\n                                    comp={comp}\n                                    textClassName={textClassName}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            ) : (\n                                <TextualInput\n                                    type={type}\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    comp={comp}\n                                    className={className}\n                                    rows={rows}\n                                    {...otherProps}\n                                />\n                            )}\n                        </Form.Group>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n"]},"metadata":{},"sourceType":"module"}