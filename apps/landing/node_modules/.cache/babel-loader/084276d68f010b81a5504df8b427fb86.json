{"ast":null,"code":"var _jsxFileName = \"/workspaces/audilex-v02/apps/landing/src/pages/docs/Custom/Avatar.tsx\";\nimport { Link } from 'react-router-dom';\nimport { Card } from 'react-bootstrap';\nimport classNames from 'classnames'; // images\n\nimport avatar7 from '../../../assets/images/avatars/img-7.jpg';\nimport avatar2 from '../../../assets/images/avatars/img-2.jpg';\nimport avatar4 from '../../../assets/images/avatars/img-4.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvatarExample = () => {\n  return /*#__PURE__*/_jsxDEV(Card, {\n    id: \"avatars\",\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        as: \"h5\",\n        className: \"mb-0\",\n        children: \"Avatars\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"sub-header\",\n        children: [\"Create and group avatars of different sizes and shapes with the size modifier css classes e.g.\", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [\"avatar-\", '{', \"xl | lg | md | sm | xs\", '}']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }, this), \". Using Bootstrap's naming convention, you can control size of avatar including standard avatar, or scale it up to different sizes.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pt-4\",\n        children: ['xl', 'lg', 'md', 'sm', 'xs'].map((size, index) => {\n          return /*#__PURE__*/_jsxDEV(\"img\", {\n            src: avatar7,\n            alt: \"avatar\",\n            className: classNames('img-fluid', 'avatar-' + size, 'rounded-sm', 'shadow-sm', 'ms-5', 'mb-2', 'mb-xl-0')\n          }, index.toString(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"sub-header mt-4\",\n        children: [\"Using an additional class \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \".rounded-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 47\n        }, this), \", you can create the rounded avatar.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pt-4\",\n        children: ['xl', 'lg', 'md', 'sm', 'xs'].map((size, index) => {\n          return /*#__PURE__*/_jsxDEV(\"img\", {\n            src: avatar7,\n            alt: \"avatar\",\n            className: classNames('img-fluid', 'avatar-' + size, 'rounded-circle', 'shadow-sm', 'ms-5', 'mb-2', 'mb-xl-0')\n          }, index.toString(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"sub-header mt-4\",\n        children: [\"Using an additional class \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \".avatar-border\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 47\n        }, this), \", you can give a nice border.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: avatar7,\n          alt: \"avatar\",\n          className: \"img-fluid avatar-lg rounded-circle avatar-border ms-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"sub-header mt-4\",\n        children: [\"Wrap the list of avatars with class \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \".avatar-group\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 57\n        }, this), \" to group and show multiple avatars.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-group\",\n        children: [avatar7, avatar2, avatar4].map((img, index) => {\n          return /*#__PURE__*/_jsxDEV(Link, {\n            to: \"#\",\n            className: \"avatar-group-item me-1\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: img,\n              alt: \"avatar\",\n              className: \"img-fluid avatar-xs rounded-circle avatar-border\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 33\n            }, this)\n          }, index.toString(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\n_c = AvatarExample;\nexport default AvatarExample;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvatarExample\");","map":{"version":3,"sources":["/workspaces/audilex-v02/apps/landing/src/pages/docs/Custom/Avatar.tsx"],"names":["Link","Card","classNames","avatar7","avatar2","avatar4","AvatarExample","map","size","index","toString","img"],"mappings":"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","sourcesContent":["import { Link } from 'react-router-dom';\nimport { Card } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n// images\nimport avatar7 from '../../../assets/images/avatars/img-7.jpg';\nimport avatar2 from '../../../assets/images/avatars/img-2.jpg';\nimport avatar4 from '../../../assets/images/avatars/img-4.jpg';\n\nconst AvatarExample = () => {\n    return (\n        <Card id=\"avatars\">\n            <Card.Body>\n                <Card.Title as=\"h5\" className=\"mb-0\">\n                    Avatars\n                </Card.Title>\n                <p className=\"sub-header\">\n                    Create and group avatars of different sizes and shapes with the size modifier css classes e.g.\n                    <code>\n                        avatar-{'{'}xl | lg | md | sm | xs{'}'}\n                    </code>\n                    . Using Bootstrap's naming convention, you can control size of avatar including standard avatar, or\n                    scale it up to different sizes.\n                </p>\n\n                <div className=\"pt-4\">\n                    {['xl', 'lg', 'md', 'sm', 'xs'].map((size, index) => {\n                        return (\n                            <img\n                                key={index.toString()}\n                                src={avatar7}\n                                alt=\"avatar\"\n                                className={classNames(\n                                    'img-fluid',\n                                    'avatar-' + size,\n                                    'rounded-sm',\n                                    'shadow-sm',\n                                    'ms-5',\n                                    'mb-2',\n                                    'mb-xl-0'\n                                )}\n                            />\n                        );\n                    })}\n                </div>\n\n                <p className=\"sub-header mt-4\">\n                    Using an additional class <code>.rounded-circle</code>, you can create the rounded avatar.\n                </p>\n\n                <div className=\"pt-4\">\n                    {['xl', 'lg', 'md', 'sm', 'xs'].map((size, index) => {\n                        return (\n                            <img\n                                key={index.toString()}\n                                src={avatar7}\n                                alt=\"avatar\"\n                                className={classNames(\n                                    'img-fluid',\n                                    'avatar-' + size,\n                                    'rounded-circle',\n                                    'shadow-sm',\n                                    'ms-5',\n                                    'mb-2',\n                                    'mb-xl-0'\n                                )}\n                            />\n                        );\n                    })}\n                </div>\n\n                <p className=\"sub-header mt-4\">\n                    Using an additional class <code>.avatar-border</code>, you can give a nice border.\n                </p>\n\n                <div className=\"pt-4\">\n                    <img src={avatar7} alt=\"avatar\" className=\"img-fluid avatar-lg rounded-circle avatar-border ms-5\" />\n                </div>\n\n                <p className=\"sub-header mt-4\">\n                    Wrap the list of avatars with class <code>.avatar-group</code> to group and show multiple avatars.\n                </p>\n\n                <div className=\"avatar-group\">\n                    {[avatar7, avatar2, avatar4].map((img, index) => {\n                        return (\n                            <Link to=\"#\" className=\"avatar-group-item me-1\" key={index.toString()}>\n                                <img\n                                    src={img}\n                                    alt=\"avatar\"\n                                    className=\"img-fluid avatar-xs rounded-circle avatar-border\"\n                                />\n                            </Link>\n                        );\n                    })}\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default AvatarExample;\n"]},"metadata":{},"sourceType":"module"}