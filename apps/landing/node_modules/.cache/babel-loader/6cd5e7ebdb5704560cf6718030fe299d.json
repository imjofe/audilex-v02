{"ast":null,"code":"var _jsxFileName = \"/workspaces/audilex-v02/apps/landing/src/pages/docs/Bootstrap/Alerts.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Alert, Card, Col, Row } from 'react-bootstrap';\nimport classNames from 'classnames';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst OutlineAlerts = () => {\n  _s();\n\n  const [alertVariants, setAlertVariants] = useState(['primary', 'secondary', 'success', 'danger', 'warning', 'info']);\n\n  const handleClose = index => {\n    const list = [...alertVariants];\n    list.splice(index, 1);\n    setAlertVariants(list);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: (alertVariants || []).map((color, index) => {\n      return /*#__PURE__*/_jsxDEV(Alert, {\n        variant: color,\n        onClose: () => handleClose(index),\n        dismissible: true,\n        className: classNames('bg-white', 'border', 'text-' + color, {\n          'mb-xxl-0': index === alertVariants.length - 1\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: classNames('badge', 'badge-soft-' + color, 'align-items-center', 'me-3'),\n          children: color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this), \"A simple \", color, \" alert\\u2014check it out!\"]\n      }, index.toString(), true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false);\n};\n\n_s(OutlineAlerts, \"d3g8avBgfDhrnOqtSyEpgTdFtKE=\");\n\n_c = OutlineAlerts;\n\nconst DefaultAlerts = () => {\n  _s2();\n\n  const [alertVariants, setAlertVariants] = useState(['danger', 'warning', 'info']);\n\n  const handleClose = index => {\n    const list = [...alertVariants];\n    list.splice(index, 1);\n    setAlertVariants(list);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [['primary', 'secondary', 'success'].map((color, index) => {\n      return /*#__PURE__*/_jsxDEV(Alert, {\n        variant: color,\n        children: [\"A simple \", color, \" alert\\u2014check it out!\"]\n      }, index.toString(), true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this);\n    }), (alertVariants || []).map((color, index) => {\n      return /*#__PURE__*/_jsxDEV(Alert, {\n        variant: color,\n        onClose: () => handleClose(index),\n        dismissible: true,\n        className: classNames({\n          'mb-0': index === alertVariants.length - 1\n        }),\n        children: [\"A simple \", color, \" alert\\u2014check it out!\"]\n      }, index.toString(), true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true);\n};\n\n_s2(DefaultAlerts, \"aHTerTC3/3Oin5qKT3sEUmvHOBs=\");\n\n_c2 = DefaultAlerts;\n\nconst Alerts = () => {\n  return /*#__PURE__*/_jsxDEV(Card, {\n    id: \"alerts\",\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        as: \"h5\",\n        className: \"mb-0\",\n        children: \"Alerts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"sub-header\",\n        children: \"Provide contextual feedback messages for typical user actions with the handful of available and flexible alert messages.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          xxl: 6,\n          children: /*#__PURE__*/_jsxDEV(OutlineAlerts, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xxl: 6,\n          children: /*#__PURE__*/_jsxDEV(DefaultAlerts, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n\n_c3 = Alerts;\nexport default Alerts;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"OutlineAlerts\");\n$RefreshReg$(_c2, \"DefaultAlerts\");\n$RefreshReg$(_c3, \"Alerts\");","map":{"version":3,"sources":["/workspaces/audilex-v02/apps/landing/src/pages/docs/Bootstrap/Alerts.tsx"],"names":["useState","Alert","Card","Col","Row","classNames","OutlineAlerts","alertVariants","setAlertVariants","handleClose","index","list","splice","map","color","length","toString","DefaultAlerts","Alerts"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { Alert, Card, Col, Row } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { Variant } from '../types';\n\nconst OutlineAlerts = () => {\n    const [alertVariants, setAlertVariants] = useState<Variant[]>([\n        'primary',\n        'secondary',\n        'success',\n        'danger',\n        'warning',\n        'info',\n    ]);\n\n    const handleClose = (index: number) => {\n        const list = [...alertVariants];\n        list.splice(index, 1);\n        setAlertVariants(list);\n    };\n\n    return (\n        <>\n            {(alertVariants || []).map((color, index) => {\n                return (\n                    <Alert\n                        variant={color}\n                        key={index.toString()}\n                        onClose={() => handleClose(index)}\n                        dismissible\n                        className={classNames('bg-white', 'border', 'text-' + color, {\n                            'mb-xxl-0': index === alertVariants.length - 1,\n                        })}\n                    >\n                        <span className={classNames('badge', 'badge-soft-' + color, 'align-items-center', 'me-3')}>\n                            {color}\n                        </span>\n                        A simple {color} alertâ€”check it out!\n                    </Alert>\n                );\n            })}\n        </>\n    );\n};\n\nconst DefaultAlerts = () => {\n    const [alertVariants, setAlertVariants] = useState<Variant[]>(['danger', 'warning', 'info']);\n\n    const handleClose = (index: number) => {\n        const list = [...alertVariants];\n        list.splice(index, 1);\n        setAlertVariants(list);\n    };\n\n    return (\n        <>\n            {['primary', 'secondary', 'success'].map((color, index) => {\n                return (\n                    <Alert variant={color} key={index.toString()}>\n                        A simple {color} alertâ€”check it out!\n                    </Alert>\n                );\n            })}\n\n            {(alertVariants || []).map((color, index) => {\n                return (\n                    <Alert\n                        variant={color}\n                        key={index.toString()}\n                        onClose={() => handleClose(index)}\n                        dismissible\n                        className={classNames({ 'mb-0': index === alertVariants.length - 1 })}\n                    >\n                        A simple {color} alertâ€”check it out!\n                    </Alert>\n                );\n            })}\n        </>\n    );\n};\n\nconst Alerts = () => {\n    return (\n        <Card id=\"alerts\">\n            <Card.Body>\n                <Card.Title as=\"h5\" className=\"mb-0\">\n                    Alerts\n                </Card.Title>\n                <p className=\"sub-header\">\n                    Provide contextual feedback messages for typical user actions with the handful of available and\n                    flexible alert messages.\n                </p>\n\n                <Row>\n                    <Col xxl={6}>\n                        <OutlineAlerts />\n                    </Col>\n                    <Col xxl={6}>\n                        <DefaultAlerts />\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default Alerts;\n"]},"metadata":{},"sourceType":"module"}